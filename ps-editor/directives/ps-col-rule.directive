<config injector=""
></config>
<template>
  <div class="rule" draggable="false">
  </div>
</template>
<script type="text/javascript">
  export default function(){
    return {
      scope : {
        options : "=",
        onStart : "&",
        onEnd : "&"
      },
      require : "ngModel",
      link(scope, element, attr, ngModel){
        let bars = [],el = element[0];
        scope.$on("$destroy", (e) => {
          console.log("destroyed:[row]!!");
        });
        function createBar(inx){
          let bar = document.createElement("div"), curSel = null,
            cachedSel = null;
          bar.setAttribute("class", "bar");
          bar.style.left = (inx - 0 + 1) / 12 * 100 + "%";
          bar.onmousedown = onmousedown
          function winmouseup(e){
            el.setAttribute("class", "rule");
            curSel && curSel.setAttribute("class", "bar active");
            bar.onmousedown = onmousedown;
            for(let i = 0; i < 11; i++){
              bars[i].onmouseover = null;
              bars[i].onmouseout = null;
            }
            window.onmouseup = null;
            scope.$apply(() => {
              console.log(cachedSel, e.target);
              if(cachedSel !== e.target){
                scope.onEnd();
              };
              curSel = null;
            });
          }
          function onmousedown(e){
            let cls = bar.getAttribute("class"),
              mousedown_self = this,
              st = 1,
              nd = 0,
              inx = bars.indexOf(this);
            cachedSel = e.target;
            scope.onStart();
            function render(){
              let cols = [], stack = 0;
               curSel = this;
              for(var i = 0; i < bars.length; i++){
                if(bars[i].getAttribute("class").indexOf("active") != -1
                  || this === bars[i]){
                  cols.push(i - stack + 1);
                  stack = i + 1;
                }
              }
              cols.push(12 - stack);
              ngModel.$viewValue = ngModel.$viewValue.map((val, i) => {
                val.col = cols[i];
                return val;
              });
              ngModel.$setViewValue(ngModel.$viewValue);
            }
            if(cls.indexOf("active") != -1){
              el.setAttribute("class", "rule mousedown");
              curSel = this;
              curSel && curSel.setAttribute("class", "bar");
              render.call(this);
              for(var i = 0; i < ngModel.$viewValue.length; i++){
                nd += ngModel.$viewValue[i].col;
                if(nd === inx + 1){
                  continue;
                } else if(nd > inx + 1){
                  for(let j = st - 1; j < nd - 1; j++){
                    bars[j].onmouseover = function(){
                      render.call(this);
                    }
                  }
                  break;
                }
                st += ngModel.$viewValue[i].col;
              }
            }
            window.onmouseup = winmouseup
          }
          return bar;
        }
        for(let i = 0; i < 11; i++){
          bars[i] = createBar(i);
          element[0].appendChild(bars[i]);
        }
        ngModel.$formatters.push((val) => {
          var inx = 0;
          for(var i = 0; i<val.length; i++){
            val[i].inx = inx += val[i].col;
          };
          return val;
        });
        ngModel.$parsers.push((val) => {
          for(var i = 0; i<val.length; i++){
            delete val[i].inx;
          };
          return val;
        })
        ngModel.$render = function(){
          let i;
          for(i = 0; i < 11; i++){
            bars[i].setAttribute("class", "bar");
          }
          for(i = 0; i < ngModel.$viewValue.length - 1; i++){
            bars[ngModel.$viewValue[i].inx - 1].setAttribute("class", "bar active");
          }
        }
      }
    }
  }
</script>
<style type="less">
</style>
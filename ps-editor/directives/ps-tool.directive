<config injector="$q,$timeout,$rootScope,$compile,psDrag,psCommand"
        type = "factory"
></config>
<template>
  <div class="item">
  </div>
</template>
<script type="text/javascript">
  import widget from "../toolkit/widget.js";
  export default function(q,timeout,rootScope,compile,psDrag,psCommand,properties){
    return {
      scope : {
        option : `=`,
        parentList : `=`
      },
      link(scope, element, attr){
        let tar = element[0],
          iteminner = document.createElement(`div`),
          attrs,
          upper = scope.option.type.substring(0,1).toUpperCase() + scope.option.type.substring(1),
          el = document.createElement(`free-comp-${scope.option.type}`),
          option = document.createElement(`div`),
          head = document.createElement(`div`),
          colHead = document.createElement(`col-head`),
          modal = document.createElement(`ps-modal`),
          point,
          buttons = [{
            name : `编辑`,
            onclick : function(e){
              scope.$apply(()=>{
                $append(document.body, modal);
              })
            }
          },{
            name : `删除`,
            onclick : function(e){
              scope.$apply(() => {
                psCommand.add(`删除了组件`,[psCommand.remove(scope.parentList, scope.parentList.indexOf(scope.option))]);
                rootScope.$broadcast(`freeboard:changed`);
              })
            }
          },{
            name : `剪切`,
            onclick : function(e){
              scope.$apply(() => {
                psCommand.add(`剪切了组件`,[psCommand.remove(scope.parentList, scope.parentList.indexOf(scope.option))]);
                rootScope.$broadcast(`freeboard:changed`);
              });
            }
          },{
            name : `复制`,
            onclick : function(e){
              scope.$apply(()=>{

              })
            }
          }];
        function each(arr, callback){
          arr = arr || [];
          for(var i = 0;i<arr.length; i++ ){
            callback(arr[i],i);
          }
        }
        function extend(a, b){
          for(var i in b){
            a[i] = b[i];
          }
          return a;
        }
        function clone( b ){
          var obj = {};
          for(var i in b){
            obj[i] = b[i]
          }
          return obj;
        }
        function $append(target, dom){
          target.appendChild(dom);
          compile(dom)(scope);
        }
        function calcBasePoint(dom){
          var target = dom,
            x = target.offsetLeft,
            y = target.offsetTop;
          while(target = target.offsetParent){
            x += target.offsetLeft + target.clientLeft;
            y += target.offsetTop + target.clientTop - target.scrollTop;
          }
          return {
            x : x - 90,
            y : y + dom.clientHeight + dom.clientTop + 5
          }
        }
        modal.setAttribute(`data-option`, `option`);
        modal.setAttribute(`data-properties`, `properties`);
        modal.setAttribute(`data-on-submit`, `submit(d)`);
        modal.setAttribute(`data-on-cancel`, `cancel()`);
        colHead.setAttribute(`data-option`, `option`);
        colHead.setAttribute(`data-parent-list`, `parentList`);
        iteminner.setAttribute(`class`,`item-inner`);
        head.setAttribute(`class`, `header`);
        option.setAttribute(`class`, `option`);
        el.setAttribute(`data-option`, `option`);
        psDrag(head, scope.option, scope.parentList, element[0]);
        head.appendChild(option);
        iteminner.appendChild(head);
        iteminner.appendChild(el);
        $append(tar, colHead);
        $append(tar, iteminner);
        option.onmousedown = function(e){
          e.stopPropagation();
          widget.createDrop(calcBasePoint(e.target), buttons);
        }
        scope.properties = properties.get(`freeComp${upper}`) || [];
        attrs = properties.getAllAttrs(`freeComp${upper}`) || {};
        scope.option.attributes = scope.option.attributes || {};
        for(var i in scope.option.attributes){
          scope.option.attributes[i] = scope.option.attributes[i] || attrs[i];
        }
        for(var i = 0; i < scope.properties.length; i++){
          for(var j in scope.properties[i].attributes){
            scope.properties[i].attributes[j][2] = scope.option.attributes[j];
          }
        }
        function checkDirty(){
          for(var i = 0; i < scope.properties.length; i++){
            for(var j in scope.properties[i].attributes){
              if(scope.option.attributes[j] != scope.properties[i].attributes[j][2]){
                //scope.option.attributes[j] = scope.properties[i].attributes[j][2];
                return true;
              }
            }
          }
          return false
        }
        function getPropObj(){
          var obj = {};
          for(var i = 0; i < scope.properties.length; i++){
            for(var j in scope.properties[i].attributes){
              obj[j] = scope.properties[i].attributes[j][2];
            }
          }
          return obj;
        }
        scope.submit = function(d){
          let isDirty = checkDirty(),
            newObj = isDirty
              ? psCommand.add(`编辑了组件[${scope.option.type}]属性`, [
                psCommand.update(scope, "option", getPropObj(), (n, val) => {
                  if(val == undefined){
                    return n.attributes;
                  } else {
                    n.attributes = val;
                  }
                })
              ]) : {};
          console.log(scope.option);
        }
        scope.cancel = function(){
          console.log(`cancel`);
        }
      }
    }
  }
</script>
<style type="less">
</style>
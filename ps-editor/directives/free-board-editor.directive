<config injector="$rootScope,$location,$q,$timeout,$compile,psCommand"
></config>
<template>
  <div>
    <div class="toppart">
      <div class="title" ng-bind="'视图名称:' + setting.attributes.viewTitle"></div>
      <button ng-disabled="!psCommand.dirty"
              ng-click="save()"
              class="btn-xs btn-success pull-right">
        保存(ctrl+S)
      </button>
      <button ng-disabled="waitings.length + commands.length == 0"
              ng-click="history($event)"
              class="btn-xs btn-default pull-right">
        历史
      </button>
      <button ng-disabled="waitings.length == 0"
              ng-click="redo()"
              class="btn-xs btn-default pull-right">
        重做(ctrl+shift+Z)
      </button>
      <button ng-disabled="commands.length == 0"
              ng-click="undo()"
              class="btn-xs btn-default pull-right">
        撤销(ctrl+Z)
      </button>
      <button ng-click="preview()"
              class="btn-xs btn-info pull-right">
        预览(ctrl+P)
      </button>
      <button ng-click="settingFn()"
              class="btn-xs btn-default pull-right">
        全局设置
      </button>
      <button ng-click="exportToJSON()"
              class="btn-xs btn-success pull-right">
        导出JSON
      </button>
      <button ng-click="importFromJSON()"
              class="btn-xs btn-success pull-right">
        导入JSON
      </button>
    </div>
    <div class="leftpart">
      <free-board-left
          data-on-preview-tree="onPrevTree(d)"
          data-on-delete="onDelete(d)"
          data-tools="tools">
      </free-board-left>
    </div>
    <div class="rightpart">
      <div class="free-board-wrap"
           ng-style="{'absolute':{overflow : 'auto'}}[type]"
           ng-class="setting.attributes.cls">
        <free-board ng-if="type=='relative'||type==undefined"
            data-options="options">
        </free-board>
        <free-board-abs ng-if="type=='absolute'"
            class="absolute"
            data-options="options">
        </free-board-abs>
      </div>
    </div>
  </div>
</template>
<script type="text/javascript">
  import { createDrop } from "../toolkit/widget.js";
  import ultility from "ps-ultility";
  export default function(rootScope,location,q,timeout,compile,psCommand,props,comptree){
    return {
      scope : {
        type : "=",
        cotree : "=",
        setting : "=",
        options : "=",
        onSave : "&",
        onDel : "&",
        onPreview : "&",
        onPreviewTree : "&"
      },
      link(scope,element,attr){
        const push = Array.prototype.push;
        let storage = window.localStorage,
          coder = document.createElement(`ps-coder`),
          modal = document.createElement(`ps-modal`);
        coder.setAttribute(`ng-model`, `code`);
        coder.setAttribute(`data-on-submit`, `codeSubmit(d)`);
        coder.setAttribute(`data-config`, `codeConfig`);
        modal.setAttribute(`data-option`, `setting`);
        modal.setAttribute(`data-properties`, `properties`);
        modal.setAttribute(`data-on-submit`, `submit(d)`);
        modal.setAttribute(`data-on-cancel`, `cancel()`);
        scope.properties = [{
          label : "基本设定",
          attributes : {
            viewTitle : ["视图名称", "input", ""],
            description : ["视图描述", "input", ""],
            cls : ["样式类", "select", "", [["","普通"],["dark","黑色"]]]
          }
        }];
        scope.setting = scope.setting || {
          attributes : {}
        };
        scope.setting.attributes = {};
        scope.onDelete = function(d){
          scope.onDel({d:d});
        }
        scope.onPrevTree = function(d){
          scope.onPreviewTree({d:d});
        }
        for(var i = 0; i < scope.properties.length; i++){
          for(var j in scope.properties[i].attributes){
            if(scope.setting.attributes.hasOwnProperty(j)){
              scope.properties[i].attributes[j][2] = scope.setting.attributes[j];
            } else {
              scope.setting.attributes[j] = scope.properties[i].attributes[j][2];
            }
          }
        }
        function extend(a, b){
          for(var i in b){
            a[i] = b[i];
          }
          return a;
        }
        function $append(target, dom){
          target.appendChild(dom);
          compile(dom)(scope);
        }
        function clone(obj){
          return JSON.parse(ultility.remove$$hashKey(JSON.stringify(obj)));
        }
        function $render(){
          scope.commands = psCommand.commands();
          scope.waitings = psCommand.waitings();
        }
        function calcBasePoint(dom){
          var target = dom,
            x = target.offsetLeft,
            y = target.offsetTop;
          while(target = target.offsetParent){
            x += target.offsetLeft + target.clientLeft;
            y += target.offsetTop + target.clientTop - target.scrollTop;
          }
          return {
            x : x + dom.clientWidth,
            y : y + dom.clientHeight + dom.clientTop
          }
        }
        function getPropObj(){
          var obj = {};
          for(var i = 0; i < scope.properties.length; i++){
            for(var j in scope.properties[i].attributes){
              obj[j] = scope.properties[i].attributes[j][2];
            }
          }
          return obj;
        }
        function checkDirty(){
          for(var i = 0; i < scope.properties.length; i++){
            for(var j in scope.properties[i].attributes){
              if(scope.setting.attributes[j] != scope.properties[i].attributes[j][2]){
                return true;
              }
            }
          }
          return false
        }
        function find(arr, callback){
          if(arr){
            for(var i = 0; i < arr.length; i++){
              if(callback(arr[i], i)){
                return arr[i];
              }
            }
          }
        }
        function pushBack(a, b){
          if(typeof b !== `undefined`){
            push.apply(a, b);
          }
        }
        function extendChildren(p, b){
          let a = p.children;
          for(let i = 0; i < b.length; i++){
            let m = find(a, (n)=>{
              console.log(n.name == b[i].name);
              return n.name == b[i].name;
            });
            if(m){
              m.children =  m.children || [];
              pushBack(m.children, b[i].children)
            } else {
              a.push(b[i]);
            }
          }
          return p;
        }
        psCommand.init();
        $render();
        scope.dirty = false;
        scope.tools = comptree;
        scope.$watch(`cotree`, (n,o,s)=>{
          if(typeof n != `undefined`){
            scope.tools =  extendChildren(clone(comptree), n ? scope.cotree.children : []);
            //extend({},scope.tools);
          }
        })
        scope.psCommand = psCommand;
        scope.history = function(e){
          if(scope.commands.length == 0 &&  scope.waitings == 0){
            return null;
          }
          $render();
          let historys = [['打开视图']].concat(scope.commands).concat(scope.waitings).map((n, i) => {
              return {
                name : n[0],
                onclick : function(){
                  scope.$apply(() => {
                    psCommand.moveTo(i-1);
                    $render();
                    rootScope.$broadcast(`freeboard:changed`);
                  })
                }
              }
            }),
            offsetLeft = 200,
            offset = calcBasePoint( e.currentTarget ),
            ins = createDrop(offset, historys, `right`, scope.commands.length);
          console.log(scope.options);
        }
        scope.undo = function(){
          psCommand.back();
          rootScope.$broadcast(`freeboard:changed`);
          $render();
        }
        scope.redo = function(){
          psCommand.forward();
          rootScope.$broadcast(`freeboard:changed`);
          $render();
        }
        scope.save = function(){
          let obj = ultility.remove$$hashKey(JSON.stringify({
            type : scope.type || "relative",
            setting : scope.setting.attributes,
            data : scope.options
          }));
          scope.psCommand.dirty = false;
          scope.onSave({d:obj});
        }
        scope.settingFn = function(){
          $append(document.body, modal);
        }
        scope.exportToJSON = function(){
          scope.codeConfig = {
            title : "代码导出"
          };
          scope.code = ultility.remove$$hashKey(JSON.stringify({
            type : scope.type || "relative",
            setting : scope.setting.attributes,
            data : scope.options
          }, null, 2));
          $append(document.body, coder);
          scope.codeSubmit = function(d){};
        };
        scope.importFromJSON = function(){
          scope.code = "";
          scope.codeConfig = {
            title : "代码导入"
          };
          $append(document.body, coder);
          scope.codeSubmit = function(d){
            let dt = JSON.parse(d);
            scope.type = dt.type;
            scope.setting = { attributes : dt.setting };
            scope.options = dt.data;
            psCommand.init();
            $render();
          }
        };
        scope.submit = function(d){
          let isDirty = checkDirty(),
            newObj = isDirty
              ? psCommand.add(`编辑了全局属性`, [
                psCommand.update(scope, `setting`, getPropObj(), (n, val) => {
                  if(val == undefined){
                    return n.attributes;
                  } else {
                    n.attributes = val;
                  }
                })
              ]) : {};
        }
        scope.preview = function(){
          let obj = ultility.remove$$hashKey(JSON.stringify({
            type : scope.type || "relative",
            setting : scope.setting.attributes,
            data : scope.options
          }));
          scope.onPreview({d:obj});
        }
        rootScope.$on(`freeboard:col-adjusted`, () => {
          $render();
        });
        document.onkeydown = function(e){
          scope.$apply(()=>{
            if(e.key === "s" && e.metaKey){
              e.preventDefault();
              scope.psCommand.dirty && scope.save();
            } else if(e.key === "z" && e.metaKey && !e.shiftKey){
              e.preventDefault();
              scope.undo();
            } else if(e.key === "z" && e.metaKey && e.shiftKey){
              e.preventDefault();
              scope.redo();
            } else if(e.key === "p" && e.metaKey){
              e.preventDefault();
              scope.preview();
            }
          });
        }
      }
    }
  };
</script>
<style type="less">
  .toppart{
    position : absolute;
    height : 30px;
    width : 100%;
    background-color : #337ab7;
    .title {
      color : #fff;
      float : left;
      margin-left : 10px;
      line-height : 30px;
    }
    .btn-xs {
      margin : 3px 10px 0 0;
      &[disabled]{
        color : #999;
        background-color : #ddd;
        &:hover{
          background-color : #ddd;
        }
      }
    }
  }
  .leftpart{
    position : absolute;
    width : 250px;
    top : 30px;
    bottom : 0;
    left : 0;
  }
  .rightpart{
    position : absolute;
    right : 0;
    top : 30px;
    bottom : 0;
    left : 250px;
  }
</style>
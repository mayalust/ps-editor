<config injector="$q,$compile,$timeout,psDrag"
></config>
<template>
  <div>
    <div class="whole">
      <div class="main-title">栅格系统</div>
      <free-board-col-select ng-model="colData"></free-board-col-select>
      <div class="item">
        <span>栅格</span>
        <free-board-drag-btn data-option="colData"></free-board-drag-btn>
      </div>
      <div class="main-title">常用组件</div>
      <div id="tree"></div>
      <!--
      <div ng-repeat="op in tools" class="item">
        <span ng-bind="op.label"></span>
        <free-board-drag-btn data-option="op.data"></free-board-drag-btn>
      </div>
      -->
    </div>
  </div>
</template>
<script type="text/javascript">
  pstree = require("proudsmart-tree");
  export default function(q,compile,timeout,psDrag){
    return {
      scope : {
        tools : `=`,
        onPreviewTree : `&`,
        onDelete : `&`
      },
      link(scope, element, attr){
        let ins, tree = document.getElementById("tree"),
          regex = /[\\\/](?:free\-comp\-)?([\w-]*)\.[\w-]*$/g;
        scope.list = [];
        scope.$watch("tools", (n, o, s) => {
          if(n){
            ins ? ins.destroy() : null;
            n = n.children;
            ins = pstree(tree, {
              showline : true,
              animate : false,
              data : n,
              themes : `show-line folder-pull-right`,
              on : {
                init : function(event){
                  var group = this.createGroup(`group`);
                  if(this.ext && this.ext.length > 0){
                    regex.lastIndex = 0;
                    var moveBtn = document.createElement(`free-board-drag-btn`),
                      match = regex.exec(this.abspath), editBtn;
                    this.label = this.title || this.name;
                    scope.list.push({
                      type : match[1],
                      attributes : this.attributes
                    })
                    moveBtn.setAttribute(`class`, `btn-xs btn-primary`);
                    moveBtn.setAttribute(`data-option`, `list[${scope.list.length - 1}]`);
                    moveBtn.style.float = "right";
                    this.icon = "glyphicon glyphicon-file";
                    timeout(() => {
                      this.text.style.display = "inline-block";
                      this.text.style.position = "absolute";
                      this.text.style.maxWidth = "135px";
                      this.text.style.overflow = "hidden";
                      this.text.style.whiteSpace = "nowrap";
                      this.text.style.textOverflow = "ellipsis";
                    });
                    group.appendChild(moveBtn);
                    if(match[1] == "view"){
                      timeout(() => {
                        this.text.style.fontWeight = "bold";
                        this.text.style.color = "#337ab7";
                        this.text.style.textDecoration = "underline";
                        this.text.onclick = e => {
                          scope.onPreviewTree({d:this});
                        }
                      });
                      editBtn = document.createElement(`button`);
                      editBtn.innerHTML = "删除";
                      editBtn.setAttribute(`class`,`btn-xs btn-default`);
                      editBtn.style.float = "right";
                      editBtn.onclick= e => {
                        scope.onDelete({d:this});
                        this.remove();
                      }
                      group.appendChild(editBtn);
                    }
                    this.render(group);
                  } else {
                    this.label = this.title || this.name;
                    this.icon = `glyphicon glyphicon-folder-open`;
                  }
                },
                click : function(event){
                  if(this.ext.length == 0){
                    event.preventDefault();
                    this.toggle();
                  }
                }
              }
            });
            compile(tree)(scope);
          }
        });
        scope.$on("$destroy", ()=>{
          ins && ins.destroy();
        })
        scope.colData = {
          type : `row`,
          children : [{
            type : `col`,
            col : 6,
            children : []
          },{
            type : `col`,
            col : 6,
            children : []
          }]
        }
      }
    }
  }
</script>
<style type="less" scoped="true">
  .whole {
    -webkit-user-select:none;
    -moz-user-select:none;
    -ms-user-select:none;
    user-select:none;
    position : absolute;
    left : 0;
    top : 0px;
    text-align : left;
    bottom : 0;
    right : 0;
    background-color : #eee;
    border-right : 1px dashed #aaa;
    .main-title {
      width : 100%;
      background-color : #666;
      border-bottom : 1px solid #888;
      color : #fff;
      padding : 5px;
    }
    .title {
      background-color : rgba(250,250,250,0);
      color : #666;
    }
    .item {
      line-height : 30px;
      padding : 5px 5px 5px 15px;
      background-color : #ddd;
      margin : 5px;
      border : 1px dashed #ccc;
      .btn-xs{
        float : right; margin : 5px 0px;
      }
      &:after{
        content : "";
        display : block;
        height : 1px;
        clear : both;
      }
    }
  }
</style>
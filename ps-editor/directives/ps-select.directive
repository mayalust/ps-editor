<config injector="$timeout,psUltility"
></config>
<template>
  <div style="padding : 5px;">
    <div id="select"></div>
  </div>
</template>
<script type="text/javascript">
  import { findElement, isArray, isObject, extend, createDocumentFragment, setClass, removeClass,
    screenOffset, createElement, addClass, clone, hasParent} from "ps-ultility";
  import { createDrop } from "ps-ui";
  export default function(timeout,psUtility){
    return {
      scope : {
        ngModel : "=?",
        config : "=?",
        options : "@"
      },
      require : '?^ngModel',
      link(scope, element, attr, ngModel) {
        let $dom = findElement( element[0] , (n)=>{ return  n.getAttribute("id") === "select"}),
          ins,
          optData = psUtility.trimngOptions(scope),
          id = optData.id,
          label = optData.label,
          dataOptions = optData.rawOptions,
          options = optData.options,
          defaultConfig = {
            placeholder: '---请选择---',
            search: true,
            multiple: false,
          };
        optData.each((id, label, item)=>{
          console.log(id, label, item);
        });
        function render(){
          ins = createDrop($dom, ngModel.$viewValue, options, scope.config);
          ins.on("select", function(e){
            ngModel.$setViewValue(e.value);
            ngModel.$render();
          });
          ins.on("close", function(){
            console.log("closed")
          });
          $dom.onclick = $domclick;
          function $domclick(){
            ins.open();
          }
        }
        addClass($dom, "form-control");
        scope.$parent.$watch("options", function(n,o,s){
          isArray(n) ? render(n) : null;
        });
        scope.config = extend(clone(defaultConfig), scope.config || {});
        ngModel.$render = function(){
          ins ?  null : render();
          if(scope.config.multiple){
            $dom.innerText = ngModel.$viewValue
              ? ngModel.$viewValue.length > 0
                ? ngModel.$viewValue.map((n)=>{
                  return n[1];
                }).toString()
                : scope.config.placeholder
              : scope.config.placeholder;
          } else {
            $dom.innerText = ngModel.$viewValue[1] || scope.config.placeholder;
          }
        };
        Array.prototype.push.call(ngModel.$parsers, function (n) {
          return scope.config.multiple ? n.map((n) => {
            return n[0];
          }) : n[0];
        });
        Array.prototype.push.call(ngModel.$formatters, function (n) {
          if(typeof n !== "undefined"){
            if(scope.config.multiple){
              let ft =  dataOptions.filter((m) => {
                return isArray(n) && n.indexOf(m[id]) !== -1;
              });
              return ft.map((n)=>{
                return [n[id], n[label]];
              });
            } else {
              let fd = dataOptions.find((m) => {
                return n === m[id];
              });
              return fd ? [fd[id], fd[label]] : [];
            }
          } else {
            return [];
          }
        });
      }
    }
  }
</script>
<style type="less" scoped="true">
  #select{
    width : 100%;
    background-color : #eee;
    text-align : center;
    -webkit-user-select:none;
    -moz-user-select:none;
    -ms-user-select:none;
    user-select:none;
    cursor : pointer;
  }
  .spa {
    color: red;font-size: 12px; margin-left: 10px;
  }
</style>
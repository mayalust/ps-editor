<config injector="psCommand,$rootScope,$timeout" type="factory"
></config>
<script type="text/javascript">
  import ultiltiy from "ps-ultility";
  export default function(psCommand,rootScope,timeout){
    return function(target, option, parentList, dom, follow){
      let replacer = document.createComment(`移动节点`),
        moveObj = {},
        events = {},
        helper = document.createElement(`div`),
        freeboard = document.getElementById(`freeboard`),
        parent = dom && dom.parentElement,
        offset = [ 10 , 10 ];
      target.onmousedown = follow ? onmousedown_follow : onmousedown;
      helper.setAttribute(`class`, `helper`);
      function setPos(target, x, y){
        target.style.top = `${y}px`;
        target.style.left = `${x}px`;
      }
      function clone(obj){
        return ultiltiy.remove$$hashKey(JSON.parse(JSON.stringify(obj)));
      }
      function extend(a, b){
        for(var i in b){
          a[i] = b[i];
        }
        return a;
      }
      function addClass(target, c){
        let cls = freeboard.getAttribute(`class`);
        if(cls){
          cls += cls.indexOf(c) == -1 ? " " + c : "";
          target.setAttribute(`class`, cls);
        } else {
          target.setAttribute(`class`, c);
        }
      }
      function removeClass(target, c){
        let cls = freeboard.getAttribute(`class`);
        if(cls){
          cls = cls.replace(new RegExp(`\\s*${c}`, `g`), "");
          target.setAttribute(`class`, cls);
        }
      }
      function onmousedown_follow(e){
        if(e.button == 0){
          moveObj = {};
          e.__option__ = option;
          events['startDrag'](e);
          offset = [ e.offsetX + 6 , e.offsetY + 6 ];
          target.onmousedown = null;
          window.onmousemove = function(ev){
            let obj = getDomOffset(dom.offsetParent);
            moveObj = {
              left : ev.pageX - obj.left - offset[0],
              top : ev.pageY - obj.top - offset[1],
            }
            setPos(dom, ev.pageX - obj.left - offset[0], ev.pageY - obj.top - offset[1]);
          }
          document.body.onmouseup = onmouseup_follow;
        }
      }
      function onmouseup_follow(e){
        e.__option__ = option;
        option.position = option.position || {};
        extend(option.position, moveObj);
        events['endDrag'](e);
        window.onmousemove = null;
        document.body.onmouseup = null;
        target.onmousedown = onmousedown_follow;
      }
      function onmousedown(e){
        offset = [ 10 , 10 ]
        if(e.button == 0){
          parent && parent.replaceChild(replacer, dom);
          document.body.onmouseup = onmouseup;
          rootScope.$broadcast(`freeboard:changed`)
          document.body.append(helper);
          setPos(helper, e.pageX - offset[0], e.pageY - offset[1]);
          timeout(() => {
            addClass(freeboard, `mousedown`)
          });
          target.onmousedown = null;
          window.onmousemove = function(e){
            setPos(helper, e.pageX - offset[0], e.pageY - offset[1]);
          }
        }
      }
      function getDomOffset(dom){
        let top = dom.offsetTop, left = dom.offsetLeft, parent = dom;
        while(parent = parent.offsetParent){
          top += parent.offsetTop + parent.clientTop;
          left += parent.offsetLeft + parent.clientLeft;
        };
        return {
          top : top,
          left : left
        }
      }
      function on(eventname, callback){
        events[eventname] = callback;
      }
      function getLocalOffset(e){
        let top = e.clientY, left = e.clientX, parent = e.target;
        while(parent = parent.offsetParent){
          top -= parent.offsetTop + parent.clientTop;
          left -= parent.offsetLeft + parent.clientLeft;
        };
        return {
          top : top,
          left : left
        }
      }
      function onmouseup(e){
        window.onmousemove = null;
        timeout(() => {
          removeClass(freeboard, `mousedown`);
        });
        rootScope.$apply(() => {
          let domtarget = e.target, list;
          if(domtarget.__isColEnd__ == true){
            list = domtarget.__parentList__;
            if(parentList){
              psCommand.add(`移动了组件[${option.type}]`, [
                psCommand.remove(parentList, parentList.indexOf(option)),
                psCommand.append(list, option)
              ]);
            } else {
              psCommand.add(`创建了组件[${option.type}]`,[
                psCommand.append(list, clone(option))
              ]);
            }
          } else if(domtarget.__isColHead__ == true){
            list = domtarget.__parentList__;
            inx = domtarget.__index__;
            if(parentList){
              psCommand.add(`移动了组件[${option.type}]`,[
                psCommand.remove(parentList, parentList.indexOf(option)),
                psCommand.insert(list, option, inx)
              ]);
            } else {
              psCommand.add(`创建了组件[${option.type}]`, [
                psCommand.insert(list, clone(option), inx)
              ]);
            }
          } else if(domtarget.__isAbs__ == true){
            let cl = clone(option), offset = getLocalOffset(e);
            list = domtarget.__parentList__;
            cl.position = cl.position || {}
            cl.position.top = offset.top;
            cl.position.left = offset.left;
            cl.position.width = 300;
            cl.position.height = 200;
            psCommand.add(`创建了组件[${option.type}]`,[
              psCommand.append(list, cl)
            ]);
          }
          parent && parent.replaceChild(dom, replacer)
          document.body.onmouseup = null;
          target.onmousedown = onmousedown;
          timeout(() => {
            rootScope.$broadcast(`freeboard:changed`)
          }, 200);
          helper.remove();
        });
      }
      return {
        on : on
      }
    };
  }
</script>